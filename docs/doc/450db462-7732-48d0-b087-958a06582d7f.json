{
    "summary": "The code provides functions for manipulating and updating JSON objects, handling tuple values, and converting JSON to lists while allowing the removal of specific instances based on a given condition.",
    "details": [
        {
            "comment": "This function recursively traverses a json-like object, yielding keys and values as it goes. It handles both dictionaries and lists, but does not deeply copy the location list, which could cause issues if the original location list is modified elsewhere in the code.",
            "location": "\"/media/root/Toshiba XG3/works/lazero/docs/src/lazero/utils/json.py\":0-29",
            "content": "from reloading import reloading\nimport json\n# it's json-like object, not json serializable object!\n@reloading\ndef jsonWalk(jsonObj, location=[]):\n    # this is not tuple. better convert it first?\n    # mlocation = copy.deepcopy(location)\n    if type(jsonObj) == dict:\n        for key in jsonObj:\n            content = jsonObj[key]\n            if type(content) not in [dict, list, tuple]:\n                yield location + [key], content\n            else:\n                # you really ok with this?\n                for mkey, mcontent in jsonWalk(content, location + [key]):\n                    yield mkey, mcontent\n    elif type(jsonObj) in [\n        list,\n        tuple,\n    ]:  # this is not pure JSON. we only have list and dicts.\n        for key, content in enumerate(jsonObj):\n            # content = jsonObj[key]\n            if type(content) not in [dict, list, tuple]:\n                yield location + [key], content\n            else:\n                for mkey, mcontent in jsonWalk(content, location + [key]):\n                    yield mkey, mcontent"
        },
        {
            "comment": "This code defines several functions for manipulating JSON objects. The `jsonWalk2` function converts a non-JSON object to a JSON format using the `jsonify` function, then calls another function (not shown) called `jsonWalk`. \nThe `jsonLocate` function recursively searches through a JSON object based on provided locations until it reaches the target location or runs out of locations. It returns the value at that location if found. \nThe `jsonUpdate` function updates a value in a JSON object, either within a dictionary or list structure, based on the provided location and update content. If the location is not empty, it recursively calls itself until it reaches the target location, then updates the corresponding value.",
            "location": "\"/media/root/Toshiba XG3/works/lazero/docs/src/lazero/utils/json.py\":30-68",
            "content": "    else:\n        raise Exception(\"Not a JSON compatible object: {}\".format(type(jsonObj)))\n@reloading\ndef jsonWalk2(jsonObj):\n    jsonObj = jsonify(jsonObj)\n    return jsonWalk(jsonObj)\n@reloading\ndef jsonLocate(jsonObj, location=[]):\n    # print(\"object:\",jsonObj)\n    # print(\"location:\",location)\n    if location != []:\n        # try:\n        return jsonLocate(jsonObj[location[0]], location[1:])\n        # except:\n        #     breakpoint()\n    return jsonObj\n@reloading\ndef jsonUpdate(jsonObj, location=[], update_content=None):\n    if location != []:\n        if type(jsonObj) == dict:\n            target = {\n                location[0]: jsonUpdate(\n                    jsonObj[location[0]],\n                    location=location[1:],\n                    update_content=update_content,\n                )\n            }\n            # print(\"keys:\", location)\n            # print(\"JSONOBJ:\", jsonObj)\n            # print(\"update target:\", target)\n            jsonObj.update(target)\n            return jsonObj\n        elif type(jsonObj) == list:"
        },
        {
            "comment": "Code for jsonUpdate():\n- Updates a JSON object with the given location and content.\n- Raises an exception if the target type is unsupported.\n\nCode for jsonDeleteObject():\n- Deletes an object from a JSON object at the specified location.",
            "location": "\"/media/root/Toshiba XG3/works/lazero/docs/src/lazero/utils/json.py\":69-100",
            "content": "            target = jsonUpdate(\n                jsonObj[location[0]],\n                location=location[1:],\n                update_content=update_content,\n            )\n            # print(\"keys:\", location)\n            # print(\"JSONOBJ:\", jsonObj)\n            # print(\"override target:\", target)\n            jsonObj[location[0]] = target\n            return jsonObj\n        else:\n            raise Exception(\"Unsupported JSON update target type:\", type(jsonObj))\n    return update_content\n@reloading\ndef jsonDeleteObject(jsonObj, location: list):\n    assert len(location) > 0\n    obj = jsonObj\n    # print(location, obj)\n    for key in location[:-1]:\n        obj = obj[key]\n    del obj[location[-1]]\n    return jsonObj\n# how to reload module directly, so we can include this function as well?\nimport typing\n# what the fuck is going on here?\n# ImportError: cannot import name 'jsonDeleteAllinstances' from 'lazero.utils.json' (/root/Desktop/works/lazero/lazero/utils/json.py)\n# how to reload module actually, making from <module> import <object> work?"
        },
        {
            "comment": "The code consists of three functions: jsonDeleteAllInstances, jsonTupleToList and reloading.\njsonDeleteAllInstances takes a JSON object, checks if the value is an instance of what is specified by 'isInstance' function, and adds the key to candidates list.\njsonTupleToList iterates through the same jsonObj2 and checks for tuple values. If found, it changes that tuple into a list and updates the original jsonObj.\nAll three functions use a decorator called reloading.",
            "location": "\"/media/root/Toshiba XG3/works/lazero/docs/src/lazero/utils/json.py\":103-139",
            "content": "@reloading\ndef jsonDeleteAllInstances(\n    jsonObj, isInstance: typing.Callable[[typing.Any], bool], copy=True\n):\n    if copy:\n        jsonObj2 = jsonObj.copy()\n    else:\n        jsonObj2 = jsonObj\n    candidates = []\n    for key, value in jsonWalk(jsonObj2):\n        if isInstance(value):\n            # delete that thing! but how to delete these things once for all?\n            candidates.append(key)\n    candidates.sort(key=lambda x: -x[-1] if type(x[-1]) == int else 1)\n    for candidate in candidates:\n        jsonObj2 = jsonDeleteObject(jsonObj, candidate)\n    return jsonObj2\n@reloading\ndef jsonTupleToList(jsonObj2, copy=True):\n    if copy:\n        jsonObj = jsonObj2.copy()\n    else:\n        jsonObj = jsonObj2\n    candidates = []\n    for key, value in jsonWalk(jsonObj):\n        if type(value) == tuple:\n            candidates.append(key)\n    for candidate in candidates:\n        data = jsonLocate(jsonObj, candidate)\n        data = list(data)\n        jsonObj = jsonUpdate(jsonObj, candidate, data)\n    return jsonObj\n@reloading"
        },
        {
            "comment": "Converts JSON object to list, removes instances based on given condition and returns refined or original JSON list.",
            "location": "\"/media/root/Toshiba XG3/works/lazero/docs/src/lazero/utils/json.py\":140-148",
            "content": "def jsonify(\n    jsonObj, copy=True, refine=False, isInstance=lambda obj: obj == ...\n):  # remove ellipsis\n    jsonObj2 = jsonTupleToList(jsonObj, copy=copy)\n    jsonObj2 = jsonDeleteAllInstances(jsonObj2, isInstance, copy=copy)\n    if refine:\n        return json.loads(json.dumps(jsonObj2))\n    else:\n        return jsonObj2"
        }
    ]
}